package generadores;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import errores.Excepcion;

/* Preliminaries to set up and use the scanner.  */
parser code
{:
    public ArrayList<String> er = new ArrayList<>();
    public ArrayList<String> id_er = new ArrayList<>();
    public ArrayList<String> conjuntos = new ArrayList<>();
    public ArrayList<String> id_conjuntos = new ArrayList<>(); 
    public ArrayList<String> entradas = new ArrayList<>();
    public ArrayList<String> id_entradas = new ArrayList<>();
    public ArrayList<String> auxiliar;
    public ArrayList<ArrayList<String>> alfabeto = new ArrayList<>();
    public ArrayList<String> alfabeto_individual = new ArrayList<>();
    public ArrayList<Excepcion> errores = new ArrayList<>();

    public void syntax_error(Symbol s){ 
        errores.add(new Excepcion("Sintático", "Error de sintaxis detectado. Se detectó: " + s.value, (s.left), (s.right)));
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

    public ArrayList<String> getER(){
        return er;
    }
    public ArrayList<String> get_Id_ER(){
        return id_er;
    }
    public ArrayList<String> getConjuntos(){
        return conjuntos;
    }
    public ArrayList<String> get_id_conjuntos(){
        return id_conjuntos;
    }
    public ArrayList<String> getEntradas(){
        return entradas;
    }
    public ArrayList<String> get_id_entradas(){
        return id_entradas;
    }    
    public ArrayList<ArrayList<String>> get_alfabeto(){
        return alfabeto;
    }   
    public ArrayList<Excepcion> getErrores(){
        return errores;
    }   

    public void add_alfabeto_individual(String texto){
        if (!alfabeto_individual.contains(texto)){
            alfabeto_individual.add(texto);
        }     
    }

    public void add_alfabeto(ArrayList<String> texto){
        auxiliar = new ArrayList<>();
        auxiliar = (ArrayList<String>)texto.clone();
        alfabeto.add(auxiliar);  
    }

    String quitarBlando = "";
    String conjunto="";
    String expresionR = "";
    public void add_er(String texto){
        er.add(texto);
    }
    public void add_id_er(String texto){
        id_er.add(texto);
    }
    public void add_conjunto(String texto){
        conjuntos.add(texto);
    }
    public void add_id_conjunto(String texto){
        id_conjuntos.add(texto);
    }
    public void add_entrada(String texto){
        entradas.add(texto);
    }
    public void add_id_entrada(String texto){
        id_entradas.add(texto);
    }
:}

action code
{:


:}


/* Terminals (tokens returned by the scanner). */
terminal String IDENTIFICADOR,CONJUNTO,DOSPUNTOS,SIGNO_APERTURA,SIGNO_CIERRE,SIGNO_ASIGNACION,PUNTOCOMA;
terminal String SEPARACION,SIGNO_UNI, SIGNO_COMB, TEXTO, NOTACION, CONJ, SALTO,COMILLA,COMILLA_DOBLE;
//terminal COM_LINEA,COMENTARIO;

/* Non-terminals */
nonterminal sentencias, asignaciones, cadenas, asignacion, expresiones, seccion, operacion, sentencia, cadena;
nonterminal inicio;


/* The grammar */
start with inicio;

inicio ::= SIGNO_APERTURA sentencias
                {:

                :}
;

sentencias ::= asignaciones cadenas
;

asignaciones ::= asignacion asignaciones
    |expresiones asignaciones
    |seccion
;

asignacion ::= CONJ DOSPUNTOS IDENTIFICADOR:id SIGNO_ASIGNACION NOTACION:no PUNTOCOMA
            {:
                add_conjunto(no);
                add_id_conjunto(id);
                //add_alfabeto(no);
                //determinar_repetido(no);
            :}
            | error PUNTOCOMA
;

expresiones ::= IDENTIFICADOR:id SIGNO_ASIGNACION operacion 
            {:
                add_id_er(id);
                add_er(expresionR);
                expresionR="";
            :}
            PUNTOCOMA
            {:
                add_alfabeto(alfabeto_individual);
                alfabeto_individual.clear();
            :}
;

operacion ::= SIGNO_COMB:comb operacion operacion
            {:
                expresionR += comb;
            :}
    |SIGNO_UNI:uni operacion
            {:
                expresionR += uni;
            :}
    |sentencia

;

sentencia ::= TEXTO:txt
            {:
                expresionR += txt;
                add_alfabeto_individual(txt);
                //determinar_repetido(txt);
            :}
    |CONJUNTO:cnj
            {:
                add_alfabeto_individual(cnj);
                expresionR += cnj;
            :}
    |SALTO:sa 
            {:
                expresionR += sa;
                add_alfabeto_individual(sa);             
            :}
    |COMILLA:co
            {:
                expresionR += co;
                add_alfabeto_individual(co);             
            :}
    |COMILLA_DOBLE:cm
            {:
                expresionR += cm;
                add_alfabeto_individual(cm);             
            :}
    |error PUNTOCOMA
;

seccion ::= SEPARACION SEPARACION
;


cadenas ::= cadena cadenas
            |SIGNO_CIERRE
;
cadena ::= IDENTIFICADOR:id DOSPUNTOS TEXTO:txt 
            {:
                add_id_entrada(id);
                add_entrada(txt);
            :}
            PUNTOCOMA cadenas   
            |error PUNTOCOMA
;