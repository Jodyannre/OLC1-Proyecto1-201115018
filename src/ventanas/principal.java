/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ventanas;

import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FilenameFilter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeModel;
import programa.Impresion;
import programa.Programa;
import programa.Resultado;

/**
 *
 * @author Jers_
 */
public class principal extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     */
    public principal() throws IOException {
        initComponents();
        llenarComboTipo();
        textArea.setEditable(false);
        textSalida.setEditable(false);
        llenarArbol();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textScroll = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        bGenerar = new javax.swing.JButton();
        bAnalizar = new javax.swing.JButton();
        Salida = new javax.swing.JLabel();
        salidaScroll = new javax.swing.JScrollPane();
        textSalida = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        arbolArchivos = new javax.swing.JTree();
        comboTipo = new javax.swing.JComboBox<>();
        bVer = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        comboReporte = new javax.swing.JComboBox<>();
        menu = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        abrir = new javax.swing.JMenuItem();
        guardar = new javax.swing.JMenuItem();
        guardarComo = new javax.swing.JMenuItem();
        generarXML = new javax.swing.JMenuItem();
        jSalir = new javax.swing.JMenu();
        bSalir = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        textArea.setColumns(20);
        textArea.setRows(5);
        textScroll.setViewportView(textArea);

        jLabel1.setText("Archivo de entrada");

        bGenerar.setText("Generar autómatas");
        bGenerar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bGenerarActionPerformed(evt);
            }
        });

        bAnalizar.setText("Analizar entrada");
        bAnalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAnalizarActionPerformed(evt);
            }
        });

        Salida.setText("Salida");

        textSalida.setColumns(20);
        textSalida.setRows(5);
        salidaScroll.setViewportView(textSalida);

        jScrollPane1.setViewportView(arbolArchivos);

        comboTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboTipoActionPerformed(evt);
            }
        });

        bVer.setText("Ver reporte");
        bVer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bVerActionPerformed(evt);
            }
        });

        jLabel2.setText("Tipo de reporte");

        jLabel3.setText("Reporte");

        jMenu1.setText("Archivo");

        abrir.setText("Abrir");
        abrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirActionPerformed(evt);
            }
        });
        jMenu1.add(abrir);

        guardar.setText("Guardar");
        jMenu1.add(guardar);

        guardarComo.setText("Guardar como");
        jMenu1.add(guardarComo);

        generarXML.setText("Generar XML");
        jMenu1.add(generarXML);

        menu.add(jMenu1);

        jSalir.setText("Salir");

        bSalir.setText("Cerrar aplicación");
        bSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSalirActionPerformed(evt);
            }
        });
        jSalir.add(bSalir);

        menu.add(jSalir);

        setJMenuBar(menu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(59, 59, 59)
                                        .addComponent(bGenerar)
                                        .addGap(92, 92, 92)
                                        .addComponent(bAnalizar))
                                    .addComponent(textScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(comboTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(bVer)
                                    .addComponent(comboReporte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(salidaScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 977, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(187, 187, 187)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(205, 205, 205)
                        .addComponent(Salida)))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(textScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bGenerar)
                            .addComponent(bAnalizar)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(comboTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(comboReporte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(bVer)))
                .addGap(18, 18, 18)
                .addComponent(Salida)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(salidaScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bGenerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bGenerarActionPerformed
        textSalida.removeAll();
        try {
            if (!programa.generarAutomatas(principal.texto)){
                JOptionPane.showMessageDialog(this, "Se han generado los autómatas.","Resultado de operación",JOptionPane.INFORMATION_MESSAGE);
                Impresion.borrarDots();
                this.llenarArbol();
                principal.datosCargados = true;
            }else{
                JOptionPane.showMessageDialog(this, "Hay errores y no se lograron generar los autómatas.","Resultado de operación",JOptionPane.ERROR_MESSAGE);
            }
        } catch (InterruptedException ex) {
            Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_bGenerarActionPerformed

    private void comboTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboTipoActionPerformed
        comboReporte.removeAllItems();
        try {
            llenarComboReporte(comboTipo.getSelectedItem().toString());
        } catch (IOException ex) {
            Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_comboTipoActionPerformed

    private void bVerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bVerActionPerformed
        if (comboTipo.getSelectedIndex()!=-1 && comboReporte.getSelectedIndex()!=-1){
            String path = "C:\\Users\\Jers_\\OneDrive\\Documents\\NetBeansProjects\\[compi1]proyecto1\\src\\reportes";
            path = path + "\\"+comboTipo.getSelectedItem().toString()+"\\"+comboReporte.getSelectedItem().toString();
            System.out.println(path);
            try {
                abrirArchivo(path);
            } catch (IOException ex) {
                Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
            JOptionPane.showMessageDialog(this, "No se ha seleccionado ningún reporte","Advertencia",JOptionPane.WARNING_MESSAGE);
            System.out.println("No hay nada seleccionado");
        }
    }//GEN-LAST:event_bVerActionPerformed

    private void abrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirActionPerformed
        JFileChooser selector = new JFileChooser("C:\\Users\\Jers_\\OneDrive\\Desktop");
        selector.setDialogTitle("Seleccione un archivo de entrada");
        selector.setFileSelectionMode(JFileChooser.FILES_ONLY);
        selector.setAcceptAllFileFilterUsed(false);
        
        //Extensiones que se pueden seleccionar
        FileNameExtensionFilter extension = new FileNameExtensionFilter("Solo textos","txt");
        
        //Agregar extensiones al selector
        selector.addChoosableFileFilter(extension);
        
        int valorRetornado = selector.showOpenDialog(null);
        // int returnValue = jfc.showSaveDialog(null);

        if (valorRetornado == JFileChooser.APPROVE_OPTION) {
            File selectedFile = selector.getSelectedFile();
            System.out.println(selectedFile.getAbsolutePath());
            try {
                llenarTextArea(selectedFile);
            } catch (IOException ex) {
                Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_abrirActionPerformed

    private void bSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSalirActionPerformed
        System.exit(1);
    }//GEN-LAST:event_bSalirActionPerformed

    private void bAnalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAnalizarActionPerformed
        textSalida.removeAll();
        if (!principal.datosCargados){
            JOptionPane.showMessageDialog(this, "No hay información cargada.","Resultado de la operación",JOptionPane.INFORMATION_MESSAGE);
        }else{
            ArrayList<Resultado> respuesta = principal.programa.validarCadenas();
            String formato = "";
            for (Resultado resultado:respuesta){
                if (resultado.isValido()){
                    formato = "La expresión: "+resultado.getValor()+" es "+resultado.getResultado()+" con la expresión: "+resultado.getExpresion()+".\n\n";
                }else{
                    formato = "La expresión: "+resultado.getValor()+" "+resultado.getResultado()+" ya que no existe la expresión: "+resultado.getExpresion()+".\n\n";
                }
                textSalida.append(formato);
            }            
        }          
    }//GEN-LAST:event_bAnalizarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        principal.programa = new Programa();
        Impresion.declararDirectorios();
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new principal().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    
    
    private void llenarComboTipo() throws IOException{
        String path = "C:\\Users\\Jers_\\OneDrive\\Documents\\NetBeansProjects\\[compi1]proyecto1\\src\\reportes";
        
        /*
            Files.find(Paths.get(path),
           Integer.MAX_VALUE,
           (filePath, fileAttr) -> fileAttr.isDirectory())
        .forEach(System.out::println);
        */    
        File file = new File(path);
        String[] directorios = file.list(new FilenameFilter() {
          @Override
          public boolean accept(File current, String name) {
            return new File(current, name).isDirectory();
          }
        });
        System.out.println(Arrays.toString(directorios));
        for (String s:directorios){
            comboTipo.addItem(s);
        }          
    }
    
    private void llenarComboReporte(String tipo) throws IOException{
        String path = "C:\\Users\\Jers_\\OneDrive\\Documents\\NetBeansProjects\\[compi1]proyecto1\\src\\reportes";
        path = path+"\\"+tipo;
            
        File file = new File(path);
        String[] archivos = file.list(new FilenameFilter() {
          @Override
          public boolean accept(File actual, String nombre) {
            return new File(actual, nombre).isFile();
          }
        });
        System.out.println(Arrays.toString(archivos));
        for (String s:archivos){
            comboReporte.addItem(s);
        }          
    }
    
    private void abrirArchivo(String path) throws IOException{
        File file = new File(path);
        Desktop escritorio = Desktop.getDesktop();
        if(file.exists()){
            escritorio.open(file);
        }                        
    }
    
    private void llenarTextArea(File archivo) throws IOException{
        leerEntrada(archivo);
        BufferedReader buff = null;
        try {
             buff = new BufferedReader(new FileReader(archivo));
             String str;
             while ((str = buff.readLine()) != null) {
             textArea.append("\n"+str);
         }
       } catch (IOException e) {
        } finally {
          try { buff.close(); } catch (Exception ex) { }
          }        
    }
    
    private void llenarArbol(){
        arbolArchivos.removeAll();
        String path = "C:\\Users\\Jers_\\OneDrive\\Documents\\NetBeansProjects\\[compi1]proyecto1\\src\\reportes";
        String hijos[];    
        File file = new File(path);
        DefaultMutableTreeNode padre,hijo;       
        DefaultMutableTreeNode abuelo = new DefaultMutableTreeNode("reportes");
        DefaultTreeModel modelo = new DefaultTreeModel(abuelo);
        arbolArchivos.setModel(modelo);
        
        int posicionHijo = 0;
        int posicionPadre = 0;
        
        String[] archivos = file.list(new FilenameFilter() {
          @Override
          public boolean accept(File actual, String nombre) {
            return new File(actual, nombre).isDirectory();
          }
        });
        System.out.println(Arrays.toString(archivos));
        for (String hojaPadre:archivos){
            //Recorrer padres
            padre = new DefaultMutableTreeNode(hojaPadre);
            hijos = getHijosArbol(path+"\\"+hojaPadre);           
            modelo.insertNodeInto(padre, abuelo, posicionPadre);
            for (String hojaHijo:hijos){
                hijo = new DefaultMutableTreeNode(hojaHijo);
                modelo.insertNodeInto(hijo, padre, posicionHijo);
                posicionHijo++;
            }
            posicionHijo=0;
            posicionPadre++;           
        }   
    }
    
    private String[] getHijosArbol(String path){
        File file = new File(path);
        String[] archivos = file.list(new FilenameFilter() {
          @Override
          public boolean accept(File actual, String nombre) {
            return new File(actual, nombre).isFile();
          }
        });        
        return archivos;
    }
    
    public static void leerEntrada(File archivo) throws FileNotFoundException, IOException {
        String cadena;
        String salida = "";
        String ruta = archivo.getAbsolutePath();
        FileReader f = new FileReader(ruta);
        BufferedReader b = new BufferedReader(f);
        while((cadena = b.readLine())!=null) {
            salida +=cadena;
        }
        b.close();
        texto = salida;
        //return salida;
    }
    static private boolean datosCargados = false;
    static private String texto;
    static private Programa programa;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Salida;
    private javax.swing.JMenuItem abrir;
    private javax.swing.JTree arbolArchivos;
    private javax.swing.JButton bAnalizar;
    private javax.swing.JButton bGenerar;
    private javax.swing.JMenuItem bSalir;
    private javax.swing.JButton bVer;
    private javax.swing.JComboBox<String> comboReporte;
    private javax.swing.JComboBox<String> comboTipo;
    private javax.swing.JMenuItem generarXML;
    private javax.swing.JMenuItem guardar;
    private javax.swing.JMenuItem guardarComo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jSalir;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuBar menu;
    private javax.swing.JScrollPane salidaScroll;
    private javax.swing.JTextArea textArea;
    private javax.swing.JTextArea textSalida;
    private javax.swing.JScrollPane textScroll;
    // End of variables declaration//GEN-END:variables
}
