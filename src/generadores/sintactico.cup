package generadores;
import java_cup.runtime.Symbol;
import java.util.ArrayList;

/* Preliminaries to set up and use the scanner.  */
parser code
{:
    public ArrayList<String> er = new ArrayList<>();
    public ArrayList<String> id_er = new ArrayList<>();
    public ArrayList<String> conjuntos = new ArrayList<>();
    public ArrayList<String> id_conjuntos = new ArrayList<>(); 
    public ArrayList<String> entradas = new ArrayList<>();
    public ArrayList<String> id_entradas = new ArrayList<>();
    public ArrayList<String> auxiliar;
    public ArrayList<ArrayList<String>> alfabeto = new ArrayList<>();
    public ArrayList<String> alfabeto_individual = new ArrayList<>();

    public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

    public ArrayList<String> getER(){
        return er;
    }
    public ArrayList<String> get_Id_ER(){
        return id_er;
    }
    public ArrayList<String> getConjuntos(){
        return conjuntos;
    }
    public ArrayList<String> get_id_conjuntos(){
        return id_conjuntos;
    }
    public ArrayList<String> getEntradas(){
        return entradas;
    }
    public ArrayList<String> get_id_entradas(){
        return id_entradas;
    }    
    public ArrayList<ArrayList<String>> get_alfabeto(){
        return alfabeto;
    }   

    public void add_alfabeto_individual(String texto){
/*
        if (texto.contains("{")){
            texto = texto.replaceAll("\\{","");
            texto = texto.replaceAll("\\}","");
        }   
*/
        if (!alfabeto_individual.contains(texto)){
            alfabeto_individual.add(texto);
        }     
    }

    public void add_alfabeto(ArrayList<String> texto){
        auxiliar = new ArrayList<>();
        auxiliar = (ArrayList<String>)texto.clone();
        alfabeto.add(auxiliar);  
    }
:}

action code
{:
    String conjunto="";
    String expresionR = "";
    public void add_er(String texto){
        er.add(texto);
    }
    public void add_id_er(String texto){
        id_er.add(texto);
    }
    public void add_conjunto(String texto){
        conjuntos.add(texto);
    }
    public void add_id_conjunto(String texto){
        id_conjuntos.add(texto);
    }
    public void add_entrada(String texto){
        entradas.add(texto);
    }
    public void add_id_entrada(String texto){
        id_entradas.add(texto);
    }


    /*
    public void determinar_repetido(String texto){
        boolean enConj = false;
        boolean may=false,min=false,dig=false,ascii=false;
        String copia = texto;
        copia = copia.replace("\"","");
        char c = copia.charAt(0);
        int primero,segundo;
        for (String s: conjuntos){
            if (s.contains("~")){
                primero = s.charAt(0);
                segundo = s.charAt(2);
                if (primero >64 && segundo<91){
                    may = true;
                }else if (primero>47 && segundo<58){
                    dig = true;
                }else if (primero>96 && segundo<123){
                    min = true;
                }else{
                    ascii = true;
                }

                if (c >64 && c<91 && may){
                    enConj = true;
                    return;
                }else if (c>47 && c<58 && dig){
                    enConj = true;
                    return;
                }else if (c>96 && c<123 && min){
                    enConj = true;
                    return;
                }else if (c>=primero && c<=segundo && ascii){
                    enConj = true;
                    return;
                }
                ascii = false;
                dig = false;
                may = false;
                min = false;


            }else{
                copia = s;
                copia = copia.replaceAll(",","");
                if (copia.contains(Character.toString(c))){
                    return;
                }
            }
        }

        if (!enConj){
            add_alfabeto(texto);
        }
    }
    */

:}


/* Terminals (tokens returned by the scanner). */
terminal String IDENTIFICADOR,CONJUNTO,DOSPUNTOS,SIGNO_APERTURA,SIGNO_CIERRE,SIGNO_ASIGNACION,PUNTOCOMA,COMENTARIO;
terminal String SEPARACION,SIGNO_UNI, SIGNO_COMB, TEXTO, NOTACION, CONJ, COM_LINEA;

/* Non-terminals */
nonterminal sentencias, asignaciones, cadenas, asignacion, expresiones, seccion, operacion, sentencia;
nonterminal inicio;


/* The grammar */
start with inicio;

inicio ::= SIGNO_APERTURA sentencias
                {:

                :}
;

sentencias ::= asignaciones cadenas
;

asignaciones ::= asignacion asignaciones
    |expresiones asignaciones
    |COM_LINEA asignaciones
    |COMENTARIO asignaciones
    |seccion
;

asignacion ::= CONJ DOSPUNTOS IDENTIFICADOR:id SIGNO_ASIGNACION NOTACION:no PUNTOCOMA
            {:
                add_conjunto(no);
                add_id_conjunto(id);
                //add_alfabeto(no);
                //determinar_repetido(no);
            :}
;

expresiones ::= IDENTIFICADOR:id SIGNO_ASIGNACION operacion 
            {:
                add_id_er(id);
                add_er(expresionR);
                expresionR="";
            :}
            PUNTOCOMA
            {:
                add_alfabeto(alfabeto_individual);
                alfabeto_individual.clear();
            :}
;

operacion ::= SIGNO_COMB:comb operacion operacion
            {:
                expresionR += comb;
            :}
    |SIGNO_UNI:uni operacion
            {:
                expresionR += uni;
            :}
    |sentencia

;

sentencia ::= TEXTO:txt
            {:
                expresionR += txt;
                add_alfabeto_individual(txt);
                //determinar_repetido(txt);
            :}
    |CONJUNTO:cnj
            {:
                add_alfabeto_individual(cnj);
                expresionR += cnj;
            :}
;

seccion ::= SEPARACION SEPARACION
;

cadenas ::= IDENTIFICADOR:id DOSPUNTOS TEXTO:txt PUNTOCOMA cadenas
            {:
                add_id_entrada(id);
                add_entrada(txt);
            :}
    |SIGNO_CIERRE
    |COM_LINEA cadenas

;