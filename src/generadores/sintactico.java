
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package generadores;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import errores.Excepcion;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\031\000\002\002\004\000\002\013\004\000\002\002" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\003" +
    "\000\002\005\010\000\002\005\004\000\002\014\002\000" +
    "\002\006\007\000\002\010\005\000\002\010\004\000\002" +
    "\010\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\004" +
    "\000\002\007\004\000\002\004\004\000\002\004\003\000" +
    "\002\015\002\000\002\012\010\000\002\012\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\063\000\004\007\004\001\002\000\012\003\013\004" +
    "\017\013\015\020\010\001\002\000\004\002\006\001\002" +
    "\000\004\002\001\001\002\000\010\003\ufffc\004\ufffc\010" +
    "\ufffc\001\002\000\004\006\061\001\002\000\012\003\013" +
    "\004\017\013\015\020\010\001\002\000\010\003\046\004" +
    "\047\010\044\001\002\000\004\012\043\001\002\000\012" +
    "\003\013\004\017\013\015\020\010\001\002\000\004\013" +
    "\041\001\002\000\004\002\000\001\002\000\004\011\020" +
    "\001\002\000\022\003\030\005\025\014\026\015\021\016" +
    "\022\021\027\022\032\023\024\001\002\000\022\003\030" +
    "\005\025\014\026\015\021\016\022\021\027\022\032\023" +
    "\024\001\002\000\024\003\ufff4\005\ufff4\012\ufff4\014\ufff4" +
    "\015\ufff4\016\ufff4\021\ufff4\022\ufff4\023\ufff4\001\002\000" +
    "\024\003\ufff5\005\ufff5\012\ufff5\014\ufff5\015\ufff5\016\ufff5" +
    "\021\ufff5\022\ufff5\023\ufff5\001\002\000\024\003\ufff0\005" +
    "\ufff0\012\ufff0\014\ufff0\015\ufff0\016\ufff0\021\ufff0\022\ufff0" +
    "\023\ufff0\001\002\000\024\003\ufff3\005\ufff3\012\ufff3\014" +
    "\ufff3\015\ufff3\016\ufff3\021\ufff3\022\ufff3\023\ufff3\001\002" +
    "\000\022\003\030\005\025\014\026\015\021\016\022\021" +
    "\027\022\032\023\024\001\002\000\024\003\ufff2\005\ufff2" +
    "\012\ufff2\014\ufff2\015\ufff2\016\ufff2\021\ufff2\022\ufff2\023" +
    "\ufff2\001\002\000\004\012\035\001\002\000\004\012\ufff9" +
    "\001\002\000\024\003\ufff1\005\ufff1\012\ufff1\014\ufff1\015" +
    "\ufff1\016\ufff1\021\ufff1\022\ufff1\023\ufff1\001\002\000\004" +
    "\012\034\001\002\000\012\003\ufff8\004\ufff8\013\ufff8\020" +
    "\ufff8\001\002\000\024\003\uffef\005\uffef\012\uffef\014\uffef" +
    "\015\uffef\016\uffef\021\uffef\022\uffef\023\uffef\001\002\000" +
    "\024\003\ufff6\005\ufff6\012\ufff6\014\ufff6\015\ufff6\016\ufff6" +
    "\021\ufff6\022\ufff6\023\ufff6\001\002\000\022\003\030\005" +
    "\025\014\026\015\021\016\022\021\027\022\032\023\024" +
    "\001\002\000\024\003\ufff7\005\ufff7\012\ufff7\014\ufff7\015" +
    "\ufff7\016\ufff7\021\ufff7\022\ufff7\023\ufff7\001\002\000\010" +
    "\003\uffee\004\uffee\010\uffee\001\002\000\010\003\ufffd\004" +
    "\ufffd\010\ufffd\001\002\000\012\003\ufffa\004\ufffa\013\ufffa" +
    "\020\ufffa\001\002\000\012\002\uffec\003\uffec\004\uffec\010" +
    "\uffec\001\002\000\010\003\046\004\047\010\044\001\002" +
    "\000\004\012\056\001\002\000\004\006\051\001\002\000" +
    "\004\002\uffff\001\002\000\004\016\052\001\002\000\004" +
    "\012\uffeb\001\002\000\004\012\054\001\002\000\010\003" +
    "\046\004\047\010\044\001\002\000\010\003\uffea\004\uffea" +
    "\010\uffea\001\002\000\010\003\uffe9\004\uffe9\010\uffe9\001" +
    "\002\000\012\002\uffed\003\uffed\004\uffed\010\uffed\001\002" +
    "\000\010\003\ufffe\004\ufffe\010\ufffe\001\002\000\004\004" +
    "\062\001\002\000\004\011\063\001\002\000\004\017\064" +
    "\001\002\000\004\012\065\001\002\000\012\003\ufffb\004" +
    "\ufffb\013\ufffb\020\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\063\000\004\013\004\001\001\000\014\002\015\003" +
    "\011\005\010\006\013\007\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\057\005\010\006\013\007\006\001\001\000\006" +
    "\004\047\012\044\001\001\000\002\001\001\000\012\003" +
    "\041\005\010\006\013\007\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\030\011" +
    "\022\001\001\000\006\010\036\011\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\035\011\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\037\011\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\056\012\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\052\001\001\000\002\001" +
    "\001\000\006\004\054\012\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ArrayList<String> er = new ArrayList<>();
    public ArrayList<String> id_er = new ArrayList<>();
    public ArrayList<String> conjuntos = new ArrayList<>();
    public ArrayList<String> id_conjuntos = new ArrayList<>(); 
    public ArrayList<String> entradas = new ArrayList<>();
    public ArrayList<String> id_entradas = new ArrayList<>();
    public ArrayList<String> auxiliar;
    public ArrayList<ArrayList<String>> alfabeto = new ArrayList<>();
    public ArrayList<String> alfabeto_individual = new ArrayList<>();
    public ArrayList<Excepcion> errores = new ArrayList<>();

    public void syntax_error(Symbol s){ 
        errores.add(new Excepcion("Sintático", "Error de sintaxis detectado. Se detectó: " + s.value, (s.left), (s.right)));
    }

/*
    public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }
*/

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

    public ArrayList<String> getER(){
        return er;
    }
    public ArrayList<String> get_Id_ER(){
        return id_er;
    }
    public ArrayList<String> getConjuntos(){
        return conjuntos;
    }
    public ArrayList<String> get_id_conjuntos(){
        return id_conjuntos;
    }
    public ArrayList<String> getEntradas(){
        return entradas;
    }
    public ArrayList<String> get_id_entradas(){
        return id_entradas;
    }    
    public ArrayList<ArrayList<String>> get_alfabeto(){
        return alfabeto;
    }   
    public ArrayList<Excepcion> getErrores(){
        return errores;
    }   

    public void add_alfabeto_individual(String texto){
/*
        if (texto.contains("{")){
            texto = texto.replaceAll("\\{","");
            texto = texto.replaceAll("\\}","");
        }   
*/
        if (!alfabeto_individual.contains(texto)){
            alfabeto_individual.add(texto);
        }     
    }

    public void add_alfabeto(ArrayList<String> texto){
        auxiliar = new ArrayList<>();
        auxiliar = (ArrayList<String>)texto.clone();
        alfabeto.add(auxiliar);  
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$sintactico$actions {


    String conjunto="";
    String expresionR = "";
    public void add_er(String texto){
        er.add(texto);
    }
    public void add_id_er(String texto){
        id_er.add(texto);
    }
    public void add_conjunto(String texto){
        conjuntos.add(texto);
    }
    public void add_id_conjunto(String texto){
        id_conjuntos.add(texto);
    }
    public void add_entrada(String texto){
        entradas.add(texto);
    }
    public void add_id_entrada(String texto){
        id_entradas.add(texto);
    }


    /*
    public void determinar_repetido(String texto){
        boolean enConj = false;
        boolean may=false,min=false,dig=false,ascii=false;
        String copia = texto;
        copia = copia.replace("\"","");
        char c = copia.charAt(0);
        int primero,segundo;
        for (String s: conjuntos){
            if (s.contains("~")){
                primero = s.charAt(0);
                segundo = s.charAt(2);
                if (primero >64 && segundo<91){
                    may = true;
                }else if (primero>47 && segundo<58){
                    dig = true;
                }else if (primero>96 && segundo<123){
                    min = true;
                }else{
                    ascii = true;
                }

                if (c >64 && c<91 && may){
                    enConj = true;
                    return;
                }else if (c>47 && c<58 && dig){
                    enConj = true;
                    return;
                }else if (c>96 && c<123 && min){
                    enConj = true;
                    return;
                }else if (c>=primero && c<=segundo && ascii){
                    enConj = true;
                    return;
                }
                ascii = false;
                dig = false;
                may = false;
                min = false;


            }else{
                copia = s;
                copia = copia.replaceAll(",","");
                if (copia.contains(Character.toString(c))){
                    return;
                }
            }
        }

        if (!enConj){
            add_alfabeto(texto);
        }
    }
    */


  private final sintactico parser;

  /** Constructor */
  CUP$sintactico$actions(sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$sintactico$do_action_part00000000(
    int                        CUP$sintactico$act_num,
    java_cup.runtime.lr_parser CUP$sintactico$parser,
    java.util.Stack            CUP$sintactico$stack,
    int                        CUP$sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintactico$result;

      /* select the action based on the action number */
      switch (CUP$sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		RESULT = start_val;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintactico$parser.done_parsing();
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= SIGNO_APERTURA sentencias 
            {
              Object RESULT =null;
		

                
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("inicio",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sentencias ::= asignaciones cadenas 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("sentencias",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // asignaciones ::= asignacion asignaciones 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("asignaciones",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // asignaciones ::= expresiones asignaciones 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("asignaciones",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // asignaciones ::= seccion 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("asignaciones",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // asignacion ::= CONJ DOSPUNTOS IDENTIFICADOR SIGNO_ASIGNACION NOTACION PUNTOCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int noleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int noright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String no = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		
                add_conjunto(no);
                add_id_conjunto(id);
                //add_alfabeto(no);
                //determinar_repetido(no);
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("asignacion",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // asignacion ::= error PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("asignacion",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$0 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;

                add_id_er(id);
                add_er(expresionR);
                expresionR="";
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expresiones ::= IDENTIFICADOR SIGNO_ASIGNACION operacion NT$0 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		
                add_alfabeto(alfabeto_individual);
                alfabeto_individual.clear();
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // operacion ::= SIGNO_COMB operacion operacion 
            {
              Object RESULT =null;
		int combleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int combright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String comb = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		
                expresionR += comb;
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("operacion",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // operacion ::= SIGNO_UNI operacion 
            {
              Object RESULT =null;
		int unileft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int uniright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String uni = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		
                expresionR += uni;
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("operacion",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // operacion ::= sentencia 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("operacion",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencia ::= TEXTO 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String txt = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                expresionR += txt;
                add_alfabeto_individual(txt);
                //determinar_repetido(txt);
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencia ::= CONJUNTO 
            {
              Object RESULT =null;
		int cnjleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cnjright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String cnj = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                add_alfabeto_individual(cnj);
                expresionR += cnj;
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencia ::= SALTO 
            {
              Object RESULT =null;
		int saleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int saright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String sa = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                expresionR += sa;
                add_alfabeto_individual(sa);             
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia ::= COMILLA 
            {
              Object RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String co = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                expresionR += co;
                add_alfabeto_individual(co);             
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia ::= COMILLA_DOBLE 
            {
              Object RESULT =null;
		int cmleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cmright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String cm = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
                expresionR += cm;
                add_alfabeto_individual(cm);             
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia ::= error PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // seccion ::= SEPARACION SEPARACION 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("seccion",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // cadenas ::= cadena cadenas 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("cadenas",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // cadenas ::= SIGNO_CIERRE 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("cadenas",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$1 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int txtleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String txt = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;

                add_id_entrada(id);
                add_entrada(txt);
            
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // cadena ::= IDENTIFICADOR DOSPUNTOS TEXTO NT$1 PUNTOCOMA cadenas 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int txtleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String txt = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("cadena",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // cadena ::= error PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("cadena",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$sintactico$do_action(
    int                        CUP$sintactico$act_num,
    java_cup.runtime.lr_parser CUP$sintactico$parser,
    java.util.Stack            CUP$sintactico$stack,
    int                        CUP$sintactico$top)
    throws java.lang.Exception
    {
              return CUP$sintactico$do_action_part00000000(
                               CUP$sintactico$act_num,
                               CUP$sintactico$parser,
                               CUP$sintactico$stack,
                               CUP$sintactico$top);
    }
}

}
