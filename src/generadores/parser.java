
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package generadores;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\021\000\002\002\004\000\002\012\004\000\002\002" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\003" +
    "\000\002\005\010\000\002\013\002\000\002\006\007\000" +
    "\002\010\005\000\002\010\004\000\002\010\003\000\002" +
    "\011\003\000\002\011\003\000\002\007\004\000\002\004" +
    "\007\000\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\047\000\004\007\004\001\002\000\010\004\014\014" +
    "\011\021\012\001\002\000\004\002\006\001\002\000\004" +
    "\002\001\001\002\000\010\004\014\014\011\021\012\001" +
    "\002\000\004\002\000\001\002\000\004\014\050\001\002" +
    "\000\004\006\043\001\002\000\006\004\ufffc\010\ufffc\001" +
    "\002\000\004\011\027\001\002\000\006\004\021\010\020" +
    "\001\002\000\010\004\014\014\011\021\012\001\002\000" +
    "\006\004\ufffe\010\ufffe\001\002\000\004\002\ufff1\001\002" +
    "\000\004\006\023\001\002\000\004\002\uffff\001\002\000" +
    "\004\017\024\001\002\000\004\012\025\001\002\000\006" +
    "\004\021\010\020\001\002\000\004\002\ufff2\001\002\000" +
    "\012\005\035\015\031\016\034\017\030\001\002\000\014" +
    "\005\ufff5\012\ufff5\015\ufff5\016\ufff5\017\ufff5\001\002\000" +
    "\012\005\035\015\031\016\034\017\030\001\002\000\014" +
    "\005\ufff6\012\ufff6\015\ufff6\016\ufff6\017\ufff6\001\002\000" +
    "\004\012\ufffa\001\002\000\012\005\035\015\031\016\034" +
    "\017\030\001\002\000\014\005\ufff4\012\ufff4\015\ufff4\016" +
    "\ufff4\017\ufff4\001\002\000\012\005\035\015\031\016\034" +
    "\017\030\001\002\000\014\005\ufff8\012\ufff8\015\ufff8\016" +
    "\ufff8\017\ufff8\001\002\000\004\012\041\001\002\000\010" +
    "\004\ufff9\014\ufff9\021\ufff9\001\002\000\014\005\ufff7\012" +
    "\ufff7\015\ufff7\016\ufff7\017\ufff7\001\002\000\004\004\044" +
    "\001\002\000\004\011\045\001\002\000\004\020\046\001" +
    "\002\000\004\012\047\001\002\000\010\004\ufffb\014\ufffb" +
    "\021\ufffb\001\002\000\006\004\ufff3\010\ufff3\001\002\000" +
    "\006\004\ufffd\010\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\047\000\004\012\004\001\001\000\014\002\007\003" +
    "\014\005\015\006\006\007\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\003\050\005\015\006\006\007" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\021\001\001\000\012\003\016\005\015\006\006\007\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\025\001\001\000\002\001\001\000\006\010" +
    "\032\011\031\001\001\000\002\001\001\000\006\010\041" +
    "\011\031\001\001\000\002\001\001\000\004\013\037\001" +
    "\001\000\006\010\035\011\031\001\001\000\002\001\001" +
    "\000\006\010\036\011\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    String tmp="";
    String salida = "";
    String aux = "";
    int contador = 0;
    ArrayList<String> signos = new ArrayList<String>();
    ArrayList<String> declaraciones = new ArrayList<String>();
    ArrayList<String> respuesta = new ArrayList<String>();
    ArrayList<String> conjuntos = new ArrayList<String>();
    Queue<String> cola=new LinkedList();

    //Formatear la notación
    public ArrayList<String> formatear(){
        for (String s:signos){
            if (s.equals("|")|| s.equals(".")){
                if (respuesta.size()>=1){
                    salida = respuesta.get(respuesta.size()-1);
                    respuesta.clear();
                    respuesta.add("("+salida+s+declaraciones.get(declaraciones.size()-1)+")");
                    cola.add("("+s+declaraciones.get(declaraciones.size()-1)+")");
                    declaraciones.remove(declaraciones.size()-1);
                    salida = "";
                }else{
                    salida = "("+declaraciones.get(declaraciones.size()-1)+s+declaraciones.get(declaraciones.size()-2)+")";
                    respuesta.add(salida);
                    cola.add(salida);
                    declaraciones.remove(declaraciones.size()-1);
                    declaraciones.remove(declaraciones.size()-1);
                    salida = "";
                }
            }else{       
                if (respuesta.size()>=1){
                    salida+=respuesta.get((respuesta.size()-1));
                    respuesta.add("("+salida+s+")");
                    salida="";
                }else{
                    respuesta.add("("+declaraciones.get(declaraciones.size()-1)+s+")");
                    declaraciones.remove(declaraciones.size()-1);
                    salida="";
                }
            }
        }

        //Sustituir la notación
        while (conjuntos.size()!=contador){
            salida = conjuntos.get(contador);
            if (tmp.contains(salida)){
                aux = respuesta.get(0).replaceAll(salida,conjuntos.get(contador+1));
                contador+=2;
                respuesta.clear();
                respuesta.add(aux);
            }else{ 
                System.out.println("El conjunto: "+salida+ "esta mal declarado.");
                conjuntos.clear();
                break;
            }
            
        }
        aux = "";
        contador = 0;
        System.out.println(respuesta);
        //System.out.println(conjuntos);
        return respuesta;
    }

    public void extraerNotacion(){
        contador = 1;
        aux = conjuntos.get(contador);
        if (aux.contains("~")){
        
        }else{

        }
    }



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= SIGNO_APERTURA sentencias 
            {
              Object RESULT =null;
		
                    System.out.println(tmp);
                    //formatear();
                    tmp="";
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sentencias ::= asignaciones cadenas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // asignaciones ::= asignacion asignaciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // asignaciones ::= expresiones asignaciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // asignaciones ::= seccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignaciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // asignacion ::= CONJ DOSPUNTOS IDENTIFICADOR SIGNO_ASIGNACION NOTACION PUNTOCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int noleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int noright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String no = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                conjuntos.add(id);
                conjuntos.add("["+no+"]");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$0 ::= 
            {
              Object RESULT =null;

                formatear();
                declaraciones.clear();
                signos.clear();
                respuesta.clear();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expresiones ::= IDENTIFICADOR SIGNO_ASIGNACION operacion NT$0 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // operacion ::= SIGNO_COMB operacion operacion 
            {
              Object RESULT =null;
		int combleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int combright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String comb = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                tmp +=comb;
                signos.add(comb);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // operacion ::= SIGNO_UNI operacion 
            {
              Object RESULT =null;
		int unileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String uni = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                tmp +=uni;
                signos.add(uni);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // operacion ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentencia ::= TEXTO 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String txt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tmp +=txt;
                declaraciones.add(txt);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencia ::= CONJUNTO 
            {
              Object RESULT =null;
		int cnjleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cnjright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cnj = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tmp +=cnj;
                declaraciones.add(cnj);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // seccion ::= SEPARACION SEPARACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seccion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // cadenas ::= IDENTIFICADOR DOSPUNTOS TEXTO PUNTOCOMA cadenas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cadenas",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cadenas ::= SIGNO_CIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cadenas",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
